---
# Source: kruise/templates/manager.yaml
apiVersion: v1
kind: Namespace
metadata:
  labels:
    control-plane: controller-manager
  name: kruise-system
---
# Source: kruise/templates/manager.yaml
apiVersion: v1
kind: Secret
metadata:
  name: kruise-webhook-certs
  namespace: kruise-system
---
# Source: kruise/templates/apps.kruise.io_advancedcronjobs.yaml
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.2.9
  creationTimestamp: null
  name: advancedcronjobs.apps.kruise.io
spec:
  additionalPrinterColumns:
  - JSONPath: .spec.schedule
    description: The schedule of advanced cron job.
    name: Schedule
    type: string
  - JSONPath: .status.type
    description: Type of cron job.
    name: Type
    type: string
  - JSONPath: .status.lastScheduleTime
    description: The last time at which job was scheduled.
    name: LastScheduleTime
    type: date
  - JSONPath: .metadata.creationTimestamp
    description: CreationTimestamp is a timestamp representing the server time when
      this object was created. It is not guaranteed to be set in happens-before order
      across separate operations. Clients may not set this value. It is represented
      in RFC3339 form and is in UTC.
    name: AGE
    type: date
  group: apps.kruise.io
  names:
    kind: AdvancedCronJob
    listKind: AdvancedCronJobList
    plural: advancedcronjobs
    shortNames:
    - acj
    singular: advancedcronjob
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      description: AdvancedCronJob is the Schema for the advancedcronjobs API
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: AdvancedCronJobSpec defines the desired state of AdvancedCronJob
          properties:
            concurrencyPolicy:
              description: 'Specifies how to treat concurrent executions of a Job.
                Valid values are: - "Allow" (default): allows CronJobs to run concurrently;
                - "Forbid": forbids concurrent runs, skipping next run if previous
                run hasn''t finished yet; - "Replace": cancels currently running job
                and replaces it with a new one'
              enum:
              - Allow
              - Forbid
              - Replace
              type: string
            failedJobsHistoryLimit:
              description: The number of failed finished jobs to retain. This is a
                pointer to distinguish between explicit zero and not specified.
              format: int32
              minimum: 0
              type: integer
            paused:
              description: Paused will pause the cron job.
              type: boolean
            schedule:
              description: The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
              minLength: 0
              type: string
            startingDeadlineSeconds:
              description: Optional deadline in seconds for starting the job if it
                misses scheduled time for any reason.  Missed jobs executions will
                be counted as failed ones.
              format: int64
              minimum: 0
              type: integer
            successfulJobsHistoryLimit:
              description: The number of successful finished jobs to retain. This
                is a pointer to distinguish between explicit zero and not specified.
              format: int32
              minimum: 0
              type: integer
            template:
              description: Specifies the job that will be created when executing a
                CronJob.
              properties:
                broadcastJobTemplate:
                  description: Specifies the broadcastjob that will be created when
                    executing a BroadcastCronJob.
                  properties:
                    metadata:
                      description: Standard object's metadata of the jobs created
                        from this template.
                      type: object
                    spec:
                      description: Specification of the desired behavior of the broadcastjob.
                      properties:
                        completionPolicy:
                          description: CompletionPolicy indicates the completion policy
                            of the job. Default is Always CompletionPolicyType
                          properties:
                            activeDeadlineSeconds:
                              description: ActiveDeadlineSeconds specifies the duration
                                in seconds relative to the startTime that the job
                                may be active before the system tries to terminate
                                it; value must be positive integer. Only works for
                                Always type.
                              format: int64
                              type: integer
                            ttlSecondsAfterFinished:
                              description: ttlSecondsAfterFinished limits the lifetime
                                of a Job that has finished execution (either Complete
                                or Failed). If this field is set, ttlSecondsAfterFinished
                                after the Job finishes, it is eligible to be automatically
                                deleted. When the Job is being deleted, its lifecycle
                                guarantees (e.g. finalizers) will be honored. If this
                                field is unset, the Job won't be automatically deleted.
                                If this field is set to zero, the Job becomes eligible
                                to be deleted immediately after it finishes. This
                                field is alpha-level and is only honored by servers
                                that enable the TTLAfterFinished feature. Only works
                                for Always type
                              format: int32
                              type: integer
                            type:
                              description: Type indicates the type of the CompletionPolicy
                                Default is Always
                              type: string
                          type: object
                        failurePolicy:
                          description: FailurePolicy indicates the behavior of the
                            job, when failed pod is found.
                          properties:
                            restartLimit:
                              description: RestartLimit specifies the number of retries
                                before marking the pod failed.
                              format: int32
                              type: integer
                            type:
                              description: Type indicates the type of FailurePolicyType.
                              type: string
                          type: object
                        parallelism:
                          anyOf:
                          - type: integer
                          - type: string
                          description: Parallelism specifies the maximum desired number
                            of pods the job should run at any given time. The actual
                            number of pods running in steady state will be less than
                            this number when the work left to do is less than max
                            parallelism. Not setting this value means no limit.
                          x-kubernetes-int-or-string: true
                        paused:
                          description: Paused will pause the job.
                          type: boolean
                        template:
                          description: Template describes the pod that will be created
                            when executing a job.
                          type: object
                          x-kubernetes-preserve-unknown-fields: true
                      required:
                      - template
                      type: object
                  type: object
                jobTemplate:
                  description: Specifies the job that will be created when executing
                    a CronJob.
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
              type: object
          required:
          - schedule
          - template
          type: object
        status:
          description: AdvancedCronJobStatus defines the observed state of AdvancedCronJob
          properties:
            active:
              description: A list of pointers to currently running jobs.
              items:
                description: ObjectReference contains enough information to let you
                  inspect or modify the referred object.
                type: object
                x-kubernetes-preserve-unknown-fields: true
              type: array
            lastScheduleTime:
              description: Information when was the last time the job was successfully
                scheduled.
              format: date-time
              type: string
            type:
              type: string
          type: object
      type: object
  version: v1alpha1
  versions:
  - name: v1alpha1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: kruise/templates/apps.kruise.io_broadcastjobs.yaml
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.2.9
  creationTimestamp: null
  name: broadcastjobs.apps.kruise.io
spec:
  additionalPrinterColumns:
  - JSONPath: .status.desired
    description: The desired number of pods. This is typically equal to the number
      of nodes satisfied to run pods.
    name: Desired
    type: integer
  - JSONPath: .status.active
    description: The number of actively running pods.
    name: Active
    type: integer
  - JSONPath: .status.succeeded
    description: The number of pods which reached phase Succeeded.
    name: Succeeded
    type: integer
  - JSONPath: .status.failed
    description: The number of pods which reached phase Failed.
    name: Failed
    type: integer
  - JSONPath: .metadata.creationTimestamp
    description: CreationTimestamp is a timestamp representing the server time when
      this object was created. It is not guaranteed to be set in happens-before order
      across separate operations. Clients may not set this value. It is represented
      in RFC3339 form and is in UTC.
    name: AGE
    type: date
  group: apps.kruise.io
  names:
    kind: BroadcastJob
    listKind: BroadcastJobList
    plural: broadcastjobs
    shortNames:
    - bcj
    singular: broadcastjob
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      description: BroadcastJob is the Schema for the broadcastjobs API
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: BroadcastJobSpec defines the desired state of BroadcastJob
          properties:
            completionPolicy:
              description: CompletionPolicy indicates the completion policy of the
                job. Default is Always CompletionPolicyType
              properties:
                activeDeadlineSeconds:
                  description: ActiveDeadlineSeconds specifies the duration in seconds
                    relative to the startTime that the job may be active before the
                    system tries to terminate it; value must be positive integer.
                    Only works for Always type.
                  format: int64
                  type: integer
                ttlSecondsAfterFinished:
                  description: ttlSecondsAfterFinished limits the lifetime of a Job
                    that has finished execution (either Complete or Failed). If this
                    field is set, ttlSecondsAfterFinished after the Job finishes,
                    it is eligible to be automatically deleted. When the Job is being
                    deleted, its lifecycle guarantees (e.g. finalizers) will be honored.
                    If this field is unset, the Job won't be automatically deleted.
                    If this field is set to zero, the Job becomes eligible to be deleted
                    immediately after it finishes. This field is alpha-level and is
                    only honored by servers that enable the TTLAfterFinished feature.
                    Only works for Always type
                  format: int32
                  type: integer
                type:
                  description: Type indicates the type of the CompletionPolicy Default
                    is Always
                  type: string
              type: object
            failurePolicy:
              description: FailurePolicy indicates the behavior of the job, when failed
                pod is found.
              properties:
                restartLimit:
                  description: RestartLimit specifies the number of retries before
                    marking the pod failed.
                  format: int32
                  type: integer
                type:
                  description: Type indicates the type of FailurePolicyType.
                  type: string
              type: object
            parallelism:
              anyOf:
              - type: integer
              - type: string
              description: Parallelism specifies the maximum desired number of pods
                the job should run at any given time. The actual number of pods running
                in steady state will be less than this number when the work left to
                do is less than max parallelism. Not setting this value means no limit.
              x-kubernetes-int-or-string: true
            paused:
              description: Paused will pause the job.
              type: boolean
            template:
              description: Template describes the pod that will be created when executing
                a job.
              type: object
              x-kubernetes-preserve-unknown-fields: true
          required:
          - template
          type: object
        status:
          description: BroadcastJobStatus defines the observed state of BroadcastJob
          properties:
            active:
              description: The number of actively running pods.
              format: int32
              type: integer
            completionTime:
              description: Represents time when the job was completed. It is not guaranteed
                to be set in happens-before order across separate operations. It is
                represented in RFC3339 form and is in UTC.
              format: date-time
              type: string
            conditions:
              description: The latest available observations of an object's current
                state.
              items:
                description: JobCondition describes current state of a job.
                properties:
                  lastProbeTime:
                    description: Last time the condition was checked.
                    format: date-time
                    type: string
                  lastTransitionTime:
                    description: Last time the condition transit from one status to
                      another.
                    format: date-time
                    type: string
                  message:
                    description: Human readable message indicating details about last
                      transition.
                    type: string
                  reason:
                    description: (brief) reason for the condition's last transition.
                    type: string
                  status:
                    description: Status of the condition, one of True, False, Unknown.
                    type: string
                  type:
                    description: Type of job condition, Complete or Failed.
                    type: string
                required:
                - status
                - type
                type: object
              type: array
            desired:
              description: The desired number of pods, this is typically equal to
                the number of nodes satisfied to run pods.
              format: int32
              type: integer
            failed:
              description: The number of pods which reached phase Failed.
              format: int32
              type: integer
            phase:
              description: The phase of the job.
              type: string
            startTime:
              description: Represents time when the job was acknowledged by the job
                controller. It is not guaranteed to be set in happens-before order
                across separate operations. It is represented in RFC3339 form and
                is in UTC.
              format: date-time
              type: string
            succeeded:
              description: The number of pods which reached phase Succeeded.
              format: int32
              type: integer
          type: object
      type: object
  version: v1alpha1
  versions:
  - name: v1alpha1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: kruise/templates/apps.kruise.io_clonesets.yaml
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.2.9
  creationTimestamp: null
  name: clonesets.apps.kruise.io
spec:
  additionalPrinterColumns:
  - JSONPath: .spec.replicas
    description: The desired number of pods.
    name: DESIRED
    type: integer
  - JSONPath: .status.updatedReplicas
    description: The number of pods updated.
    name: UPDATED
    type: integer
  - JSONPath: .status.updatedReadyReplicas
    description: The number of pods updated and ready.
    name: UPDATED_READY
    type: integer
  - JSONPath: .status.readyReplicas
    description: The number of pods ready.
    name: READY
    type: integer
  - JSONPath: .status.replicas
    description: The number of currently all pods.
    name: TOTAL
    type: integer
  - JSONPath: .metadata.creationTimestamp
    description: CreationTimestamp is a timestamp representing the server time when
      this object was created. It is not guaranteed to be set in happens-before order
      across separate operations. Clients may not set this value. It is represented
      in RFC3339 form and is in UTC.
    name: AGE
    type: date
  group: apps.kruise.io
  names:
    kind: CloneSet
    listKind: CloneSetList
    plural: clonesets
    shortNames:
    - clone
    singular: cloneset
  scope: Namespaced
  subresources:
    scale:
      labelSelectorPath: .status.labelSelector
      specReplicasPath: .spec.replicas
      statusReplicasPath: .status.replicas
    status: {}
  validation:
    openAPIV3Schema:
      description: CloneSet is the Schema for the clonesets API
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: CloneSetSpec defines the desired state of CloneSet
          properties:
            lifecycle:
              description: Lifecycle defines the lifecycle hooks for Pods pre-delete,
                in-place update.
              properties:
                inPlaceUpdate:
                  description: InPlaceUpdate is the hook before Pod to update and
                    after Pod has been updated.
                  properties:
                    finalizersHandler:
                      items:
                        type: string
                      type: array
                    labelsHandler:
                      additionalProperties:
                        type: string
                      type: object
                  type: object
                preDelete:
                  description: PreDelete is the hook before Pod to be deleted.
                  properties:
                    finalizersHandler:
                      items:
                        type: string
                      type: array
                    labelsHandler:
                      additionalProperties:
                        type: string
                      type: object
                  type: object
              type: object
            minReadySeconds:
              description: Minimum number of seconds for which a newly created pod
                should be ready without any of its container crashing, for it to be
                considered available. Defaults to 0 (pod will be considered available
                as soon as it is ready)
              format: int32
              type: integer
            replicas:
              description: Replicas is the desired number of replicas of the given
                Template. These are replicas in the sense that they are instantiations
                of the same Template. If unspecified, defaults to 1.
              format: int32
              type: integer
            revisionHistoryLimit:
              description: RevisionHistoryLimit is the maximum number of revisions
                that will be maintained in the CloneSet's revision history. The revision
                history consists of all revisions not represented by a currently applied
                CloneSetSpec version. The default value is 10.
              format: int32
              type: integer
            scaleStrategy:
              description: ScaleStrategy indicates the ScaleStrategy that will be
                employed to create and delete Pods in the CloneSet.
              properties:
                podsToDelete:
                  description: PodsToDelete is the names of Pod should be deleted.
                    Note that this list will be truncated for non-existing pod names.
                  items:
                    type: string
                  type: array
              type: object
            selector:
              description: 'Selector is a label query over pods that should match
                the replica count. It must match the pod template''s labels. More
                info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors'
              properties:
                matchExpressions:
                  description: matchExpressions is a list of label selector requirements.
                    The requirements are ANDed.
                  items:
                    description: A label selector requirement is a selector that contains
                      values, a key, and an operator that relates the key and values.
                    properties:
                      key:
                        description: key is the label key that the selector applies
                          to.
                        type: string
                      operator:
                        description: operator represents a key's relationship to a
                          set of values. Valid operators are In, NotIn, Exists and
                          DoesNotExist.
                        type: string
                      values:
                        description: values is an array of string values. If the operator
                          is In or NotIn, the values array must be non-empty. If the
                          operator is Exists or DoesNotExist, the values array must
                          be empty. This array is replaced during a strategic merge
                          patch.
                        items:
                          type: string
                        type: array
                    required:
                    - key
                    - operator
                    type: object
                  type: array
                matchLabels:
                  additionalProperties:
                    type: string
                  description: matchLabels is a map of {key,value} pairs. A single
                    {key,value} in the matchLabels map is equivalent to an element
                    of matchExpressions, whose key field is "key", the operator is
                    "In", and the values array contains only "value". The requirements
                    are ANDed.
                  type: object
              type: object
            template:
              description: Template describes the pods that will be created.
              type: object
              x-kubernetes-preserve-unknown-fields: true
            updateStrategy:
              description: UpdateStrategy indicates the UpdateStrategy that will be
                employed to update Pods in the CloneSet when a revision is made to
                Template.
              properties:
                inPlaceUpdateStrategy:
                  description: InPlaceUpdateStrategy contains strategies for in-place
                    update.
                  properties:
                    gracePeriodSeconds:
                      description: GracePeriodSeconds is the timespan between set
                        Pod status to not-ready and update images in Pod spec when
                        in-place update a Pod.
                      format: int32
                      type: integer
                  type: object
                maxSurge:
                  anyOf:
                  - type: integer
                  - type: string
                  description: 'The maximum number of pods that can be scheduled above
                    the desired replicas during the update. Value can be an absolute
                    number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute
                    number is calculated from percentage by rounding up. Defaults
                    to 0.'
                  x-kubernetes-int-or-string: true
                maxUnavailable:
                  anyOf:
                  - type: integer
                  - type: string
                  description: 'The maximum number of pods that can be unavailable
                    during the update. Value can be an absolute number (ex: 5) or
                    a percentage of desired pods (ex: 10%). Absolute number is calculated
                    from percentage by rounding up by default. When maxSurge > 0,
                    absolute number is calculated from percentage by rounding down.
                    Defaults to 20%.'
                  x-kubernetes-int-or-string: true
                partition:
                  anyOf:
                  - type: integer
                  - type: string
                  description: 'Partition is the desired number of pods in old revisions.
                    Value can be an absolute number (ex: 5) or a percentage of desired
                    pods (ex: 10%). Absolute number is calculated from percentage
                    by rounding up by default. It means when partition is set during
                    pods updating, (replicas - partition value) number of pods will
                    be updated. Default value is 0.'
                  x-kubernetes-int-or-string: true
                paused:
                  description: Paused indicates that the CloneSet is paused. Default
                    value is false
                  type: boolean
                priorityStrategy:
                  description: Priorities are the rules for calculating the priority
                    of updating pods. Each pod to be updated, will pass through these
                    terms and get a sum of weights.
                  properties:
                    orderPriority:
                      description: 'Order priority terms, pods will be sorted by the
                        value of orderedKey. For example: ``` orderPriority: - orderedKey:
                        key1 - orderedKey: key2 ``` First, all pods which have key1
                        in labels will be sorted by the value of key1. Then, the left
                        pods which have no key1 but have key2 in labels will be sorted
                        by the value of key2 and put behind those pods have key1.'
                      items:
                        description: UpdatePriorityOrder defines order priority.
                        properties:
                          orderedKey:
                            description: Calculate priority by value of this key.
                              Values of this key, will be sorted by GetInt(val). GetInt
                              method will find the last int in value, such as getting
                              5 in value '5', getting 10 in value 'sts-10'.
                            type: string
                        required:
                        - orderedKey
                        type: object
                      type: array
                    weightPriority:
                      description: Weight priority terms, pods will be sorted by the
                        sum of all terms weight.
                      items:
                        description: UpdatePriorityWeightTerm defines weight priority.
                        properties:
                          matchSelector:
                            description: MatchSelector is used to select by pod's
                              labels.
                            properties:
                              matchExpressions:
                                description: matchExpressions is a list of label selector
                                  requirements. The requirements are ANDed.
                                items:
                                  description: A label selector requirement is a selector
                                    that contains values, a key, and an operator that
                                    relates the key and values.
                                  properties:
                                    key:
                                      description: key is the label key that the selector
                                        applies to.
                                      type: string
                                    operator:
                                      description: operator represents a key's relationship
                                        to a set of values. Valid operators are In,
                                        NotIn, Exists and DoesNotExist.
                                      type: string
                                    values:
                                      description: values is an array of string values.
                                        If the operator is In or NotIn, the values
                                        array must be non-empty. If the operator is
                                        Exists or DoesNotExist, the values array must
                                        be empty. This array is replaced during a
                                        strategic merge patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                  type: object
                                type: array
                              matchLabels:
                                additionalProperties:
                                  type: string
                                description: matchLabels is a map of {key,value} pairs.
                                  A single {key,value} in the matchLabels map is equivalent
                                  to an element of matchExpressions, whose key field
                                  is "key", the operator is "In", and the values array
                                  contains only "value". The requirements are ANDed.
                                type: object
                            type: object
                          weight:
                            description: Weight associated with matching the corresponding
                              matchExpressions, in the range 1-100.
                            format: int32
                            type: integer
                        required:
                        - matchSelector
                        - weight
                        type: object
                      type: array
                  type: object
                scatterStrategy:
                  description: ScatterStrategy defines the scatter rules to make pods
                    been scattered when update. This will avoid pods with the same
                    key-value to be updated in one batch. - Note that pods will be
                    scattered after priority sort. So, although priority strategy
                    and scatter strategy can be applied together, we suggest to use
                    either one of them. - If scatterStrategy is used, we suggest to
                    just use one term. Otherwise, the update order can be hard to
                    understand.
                  items:
                    properties:
                      key:
                        type: string
                      value:
                        type: string
                    required:
                    - key
                    - value
                    type: object
                  type: array
                type:
                  description: Type indicates the type of the CloneSetUpdateStrategy.
                    Default is ReCreate.
                  type: string
              type: object
            volumeClaimTemplates:
              description: VolumeClaimTemplates is a list of claims that pods are
                allowed to reference. Note that PVC will be deleted when its pod has
                been deleted.
              items:
                description: PersistentVolumeClaim is a user's request for and claim
                  to a persistent volume
                type: object
                x-kubernetes-preserve-unknown-fields: true
              type: array
          required:
          - selector
          - template
          type: object
        status:
          description: CloneSetStatus defines the observed state of CloneSet
          properties:
            availableReplicas:
              description: AvailableReplicas is the number of Pods created by the
                CloneSet controller that have a Ready Condition for at least minReadySeconds.
              format: int32
              type: integer
            collisionCount:
              description: CollisionCount is the count of hash collisions for the
                CloneSet. The CloneSet controller uses this field as a collision avoidance
                mechanism when it needs to create the name for the newest ControllerRevision.
              format: int32
              type: integer
            conditions:
              description: Conditions represents the latest available observations
                of a CloneSet's current state.
              items:
                description: CloneSetCondition describes the state of a CloneSet at
                  a certain point.
                properties:
                  lastTransitionTime:
                    description: Last time the condition transitioned from one status
                      to another.
                    format: date-time
                    type: string
                  message:
                    description: A human readable message indicating details about
                      the transition.
                    type: string
                  reason:
                    description: The reason for the condition's last transition.
                    type: string
                  status:
                    description: Status of the condition, one of True, False, Unknown.
                    type: string
                  type:
                    description: Type of CloneSet condition.
                    type: string
                required:
                - status
                - type
                type: object
              type: array
            labelSelector:
              description: LabelSelector is label selectors for query over pods that
                should match the replica count used by HPA.
              type: string
            observedGeneration:
              description: ObservedGeneration is the most recent generation observed
                for this CloneSet. It corresponds to the CloneSet's generation, which
                is updated on mutation by the API Server.
              format: int64
              type: integer
            readyReplicas:
              description: ReadyReplicas is the number of Pods created by the CloneSet
                controller that have a Ready Condition.
              format: int32
              type: integer
            replicas:
              description: Replicas is the number of Pods created by the CloneSet
                controller.
              format: int32
              type: integer
            updateRevision:
              description: UpdateRevision, if not empty, indicates the latest revision
                of the CloneSet.
              type: string
            updatedReadyReplicas:
              description: UpdatedReadyReplicas is the number of Pods created by the
                CloneSet controller from the CloneSet version indicated by updateRevision
                and have a Ready Condition.
              format: int32
              type: integer
            updatedReplicas:
              description: UpdatedReplicas is the number of Pods created by the CloneSet
                controller from the CloneSet version indicated by updateRevision.
              format: int32
              type: integer
          required:
          - availableReplicas
          - readyReplicas
          - replicas
          - updatedReadyReplicas
          - updatedReplicas
          type: object
      type: object
  version: v1alpha1
  versions:
  - name: v1alpha1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: kruise/templates/apps.kruise.io_daemonsets.yaml
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.2.9
  creationTimestamp: null
  name: daemonsets.apps.kruise.io
spec:
  additionalPrinterColumns:
  - JSONPath: .status.desiredNumberScheduled
    description: The desired number of pods.
    name: DesiredNumber
    type: integer
  - JSONPath: .status.currentNumberScheduled
    description: The current number of pods.
    name: CurrentNumber
    type: integer
  - JSONPath: .status.updatedNumberScheduled
    description: The updated number of pods.
    name: UpdatedNumberScheduled
    type: integer
  - JSONPath: .metadata.creationTimestamp
    description: CreationTimestamp is a timestamp representing the server time when
      this object was created. It is not guaranteed to be set in happens-before order
      across separate operations. Clients may not set this value. It is represented
      in RFC3339 form and is in UTC.
    name: AGE
    type: date
  group: apps.kruise.io
  names:
    kind: DaemonSet
    listKind: DaemonSetList
    plural: daemonsets
    shortNames:
    - daemon
    singular: daemonset
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      description: DaemonSet is the Schema for the daemonsets API
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: DaemonSetSpec defines the desired state of DaemonSet
          properties:
            burstReplicas:
              anyOf:
              - type: integer
              - type: string
              description: BurstReplicas is a rate limiter for booting pods on a lot
                of pods. The default value is 250
              x-kubernetes-int-or-string: true
            minReadySeconds:
              description: The minimum number of seconds for which a newly created
                DaemonSet pod should be ready without any of its container crashing,
                for it to be considered available. Defaults to 0 (pod will be considered
                available as soon as it is ready).
              format: int32
              type: integer
            revisionHistoryLimit:
              description: The number of old history to retain to allow rollback.
                This is a pointer to distinguish between explicit zero and not specified.
                Defaults to 10.
              format: int32
              type: integer
            selector:
              description: 'A label query over pods that are managed by the daemon
                set. Must match in order to be controlled. It must match the pod template''s
                labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors'
              properties:
                matchExpressions:
                  description: matchExpressions is a list of label selector requirements.
                    The requirements are ANDed.
                  items:
                    description: A label selector requirement is a selector that contains
                      values, a key, and an operator that relates the key and values.
                    properties:
                      key:
                        description: key is the label key that the selector applies
                          to.
                        type: string
                      operator:
                        description: operator represents a key's relationship to a
                          set of values. Valid operators are In, NotIn, Exists and
                          DoesNotExist.
                        type: string
                      values:
                        description: values is an array of string values. If the operator
                          is In or NotIn, the values array must be non-empty. If the
                          operator is Exists or DoesNotExist, the values array must
                          be empty. This array is replaced during a strategic merge
                          patch.
                        items:
                          type: string
                        type: array
                    required:
                    - key
                    - operator
                    type: object
                  type: array
                matchLabels:
                  additionalProperties:
                    type: string
                  description: matchLabels is a map of {key,value} pairs. A single
                    {key,value} in the matchLabels map is equivalent to an element
                    of matchExpressions, whose key field is "key", the operator is
                    "In", and the values array contains only "value". The requirements
                    are ANDed.
                  type: object
              type: object
            template:
              description: 'An object that describes the pod that will be created.
                The DaemonSet will create exactly one copy of this pod on every node
                that matches the template''s node selector (or on every node if no
                node selector is specified). More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template'
              type: object
              x-kubernetes-preserve-unknown-fields: true
            updateStrategy:
              description: An update strategy to replace existing DaemonSet pods with
                new pods.
              properties:
                rollingUpdate:
                  description: Rolling update config params. Present only if type
                    = "RollingUpdate".
                  properties:
                    maxSurge:
                      anyOf:
                      - type: integer
                      - type: string
                      description: 'Only when type=SurgingRollingUpdateType, it works.
                        The maximum number of DaemonSet pods that can be scheduled
                        above the desired number of pods during the update. Value
                        can be an absolute number (ex: 5) or a percentage of the total
                        number of DaemonSet pods at the start of the update (ex: 10%).
                        The absolute number is calculated from the percentage by rounding
                        up. This cannot be 0. The default value is 1. Example: when
                        this is set to 30%, at most 30% of the total number of nodes
                        that should be running the daemon pod (i.e. status.desiredNumberScheduled)
                        can have 2 pods running at any given time. The update starts
                        by starting replacements for at most 30% of those DaemonSet
                        pods. Once the new pods are available it then stops the existing
                        pods before proceeding onto other DaemonSet pods, thus ensuring
                        that at most 130% of the desired final number of DaemonSet  pods
                        are running at all times during the update.'
                      x-kubernetes-int-or-string: true
                    maxUnavailable:
                      anyOf:
                      - type: integer
                      - type: string
                      description: 'The maximum number of DaemonSet pods that can
                        be unavailable during the update. Value can be an absolute
                        number (ex: 5) or a percentage of total number of DaemonSet
                        pods at the start of the update (ex: 10%). Absolute number
                        is calculated from percentage by rounding up. This cannot
                        be 0. Default value is 1. Example: when this is set to 30%,
                        at most 30% of the total number of nodes that should be running
                        the daemon pod (i.e. status.desiredNumberScheduled) can have
                        their pods stopped for an update at any given time. The update
                        starts by stopping at most 30% of those DaemonSet pods and
                        then brings up new DaemonSet pods in their place. Once the
                        new pods are available, it then proceeds onto other DaemonSet
                        pods, thus ensuring that at least 70% of original number of
                        DaemonSet pods are available at all times during the update.'
                      x-kubernetes-int-or-string: true
                    partition:
                      description: The number of DaemonSet pods remained to be old
                        version. Default value is 0. Maximum value is status.DesiredNumberScheduled,
                        which means no pod will be updated.
                      format: int32
                      type: integer
                    paused:
                      description: Indicates that the daemon set is paused and will
                        not be processed by the daemon set controller.
                      type: boolean
                    rollingUpdateType:
                      description: Type is to specify which kind of rollingUpdate.
                      type: string
                    selector:
                      description: A label query over nodes that are managed by the
                        daemon set RollingUpdate. Must match in order to be controlled.
                        It must match the node's labels.
                      properties:
                        matchExpressions:
                          description: matchExpressions is a list of label selector
                            requirements. The requirements are ANDed.
                          items:
                            description: A label selector requirement is a selector
                              that contains values, a key, and an operator that relates
                              the key and values.
                            properties:
                              key:
                                description: key is the label key that the selector
                                  applies to.
                                type: string
                              operator:
                                description: operator represents a key's relationship
                                  to a set of values. Valid operators are In, NotIn,
                                  Exists and DoesNotExist.
                                type: string
                              values:
                                description: values is an array of string values.
                                  If the operator is In or NotIn, the values array
                                  must be non-empty. If the operator is Exists or
                                  DoesNotExist, the values array must be empty. This
                                  array is replaced during a strategic merge patch.
                                items:
                                  type: string
                                type: array
                            required:
                            - key
                            - operator
                            type: object
                          type: array
                        matchLabels:
                          additionalProperties:
                            type: string
                          description: matchLabels is a map of {key,value} pairs.
                            A single {key,value} in the matchLabels map is equivalent
                            to an element of matchExpressions, whose key field is
                            "key", the operator is "In", and the values array contains
                            only "value". The requirements are ANDed.
                          type: object
                      type: object
                  type: object
                type:
                  description: Type of daemon set update. Can be "RollingUpdate" or
                    "OnDelete". Default is RollingUpdate.
                  type: string
              type: object
          required:
          - selector
          - template
          type: object
        status:
          description: DaemonSetStatus defines the observed state of DaemonSet
          properties:
            collisionCount:
              description: Count of hash collisions for the DaemonSet. The DaemonSet
                controller uses this field as a collision avoidance mechanism when
                it needs to create the name for the newest ControllerRevision.
              format: int32
              type: integer
            conditions:
              description: Represents the latest available observations of a DaemonSet's
                current state.
              items:
                description: DaemonSetCondition describes the state of a DaemonSet
                  at a certain point.
                properties:
                  lastTransitionTime:
                    description: Last time the condition transitioned from one status
                      to another.
                    format: date-time
                    type: string
                  message:
                    description: A human readable message indicating details about
                      the transition.
                    type: string
                  reason:
                    description: The reason for the condition's last transition.
                    type: string
                  status:
                    description: Status of the condition, one of True, False, Unknown.
                    type: string
                  type:
                    description: Type of DaemonSet condition.
                    type: string
                required:
                - status
                - type
                type: object
              type: array
            currentNumberScheduled:
              description: 'The number of nodes that are running at least 1 daemon
                pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/'
              format: int32
              type: integer
            daemonSetHash:
              description: DaemonSetHash is the controller-revision-hash, which represents
                the latest version of the DaemonSet.
              type: string
            desiredNumberScheduled:
              description: 'The total number of nodes that should be running the daemon
                pod (including nodes correctly running the daemon pod). More info:
                https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/'
              format: int32
              type: integer
            numberAvailable:
              description: The number of nodes that should be running the daemon pod
                and have one or more of the daemon pod running and available (ready
                for at least spec.minReadySeconds)
              format: int32
              type: integer
            numberMisscheduled:
              description: 'The number of nodes that are running the daemon pod, but
                are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/'
              format: int32
              type: integer
            numberReady:
              description: The number of nodes that should be running the daemon pod
                and have one or more of the daemon pod running and ready.
              format: int32
              type: integer
            numberUnavailable:
              description: The number of nodes that should be running the daemon pod
                and have none of the daemon pod running and available (ready for at
                least spec.minReadySeconds)
              format: int32
              type: integer
            observedGeneration:
              description: The most recent generation observed by the daemon set controller.
              format: int64
              type: integer
            updatedNumberScheduled:
              description: The total number of nodes that are running updated daemon
                pod
              format: int32
              type: integer
          required:
          - currentNumberScheduled
          - daemonSetHash
          - desiredNumberScheduled
          - numberMisscheduled
          - numberReady
          - updatedNumberScheduled
          type: object
      type: object
  version: v1alpha1
  versions:
  - name: v1alpha1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: kruise/templates/apps.kruise.io_sidecarsets.yaml
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.2.9
  creationTimestamp: null
  name: sidecarsets.apps.kruise.io
spec:
  additionalPrinterColumns:
  - JSONPath: .status.matchedPods
    description: The number of pods matched.
    name: MATCHED
    type: integer
  - JSONPath: .status.updatedPods
    description: The number of pods matched and updated.
    name: UPDATED
    type: integer
  - JSONPath: .status.readyPods
    description: The number of pods matched and ready.
    name: READY
    type: integer
  - JSONPath: .metadata.creationTimestamp
    description: CreationTimestamp is a timestamp representing the server time when
      this object was created. It is not guaranteed to be set in happens-before order
      across separate operations. Clients may not set this value. It is represented
      in RFC3339 form and is in UTC.
    name: AGE
    type: date
  group: apps.kruise.io
  names:
    kind: SidecarSet
    listKind: SidecarSetList
    plural: sidecarsets
    singular: sidecarset
  scope: Cluster
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      description: SidecarSet is the Schema for the sidecarsets API
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: SidecarSetSpec defines the desired state of SidecarSet
          properties:
            containers:
              description: Containers is the list of sidecar containers to be injected
                into the selected pod
              items:
                description: SidecarContainer defines the container of Sidecar
                type: object
                x-kubernetes-preserve-unknown-fields: true
              type: array
            initContainers:
              description: Containers is the list of init containers to be injected
                into the selected pod We will inject those containers by their name
                in ascending order We only inject init containers when a new pod is
                created, it does not apply to any existing pod
              items:
                description: SidecarContainer defines the container of Sidecar
                type: object
                x-kubernetes-preserve-unknown-fields: true
              type: array
            paused:
              description: Paused indicates that the sidecarset is paused and will
                not be processed by the sidecarset controller.
              type: boolean
            selector:
              description: selector is a label query over pods that should be injected
              properties:
                matchExpressions:
                  description: matchExpressions is a list of label selector requirements.
                    The requirements are ANDed.
                  items:
                    description: A label selector requirement is a selector that contains
                      values, a key, and an operator that relates the key and values.
                    properties:
                      key:
                        description: key is the label key that the selector applies
                          to.
                        type: string
                      operator:
                        description: operator represents a key's relationship to a
                          set of values. Valid operators are In, NotIn, Exists and
                          DoesNotExist.
                        type: string
                      values:
                        description: values is an array of string values. If the operator
                          is In or NotIn, the values array must be non-empty. If the
                          operator is Exists or DoesNotExist, the values array must
                          be empty. This array is replaced during a strategic merge
                          patch.
                        items:
                          type: string
                        type: array
                    required:
                    - key
                    - operator
                    type: object
                  type: array
                matchLabels:
                  additionalProperties:
                    type: string
                  description: matchLabels is a map of {key,value} pairs. A single
                    {key,value} in the matchLabels map is equivalent to an element
                    of matchExpressions, whose key field is "key", the operator is
                    "In", and the values array contains only "value". The requirements
                    are ANDed.
                  type: object
              type: object
            strategy:
              description: The sidecarset strategy to use to replace existing pods
                with new ones.
              properties:
                rollingUpdate:
                  description: RollingUpdateSidecarSet is used to communicate parameter
                  properties:
                    maxUnavailable:
                      anyOf:
                      - type: integer
                      - type: string
                      x-kubernetes-int-or-string: true
                  type: object
              type: object
            volumes:
              description: List of volumes that can be mounted by sidecar containers
              items:
                description: Volume represents a named volume in a pod that may be
                  accessed by any container in the pod.
                type: object
                x-kubernetes-preserve-unknown-fields: true
              type: array
          type: object
        status:
          description: SidecarSetStatus defines the observed state of SidecarSet
          properties:
            matchedPods:
              description: matchedPods is the number of Pods whose labels are matched
                with this SidecarSet's selector and are created after sidecarset creates
              format: int32
              type: integer
            observedGeneration:
              description: observedGeneration is the most recent generation observed
                for this SidecarSet. It corresponds to the SidecarSet's generation,
                which is updated on mutation by the API Server.
              format: int64
              type: integer
            readyPods:
              description: readyPods is the number of matched Pods that have a ready
                condition
              format: int32
              type: integer
            updatedPods:
              description: updatedPods is the number of matched Pods that are injected
                with the latest SidecarSet's containers
              format: int32
              type: integer
          required:
          - matchedPods
          - readyPods
          - updatedPods
          type: object
      type: object
  version: v1alpha1
  versions:
  - name: v1alpha1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: kruise/templates/apps.kruise.io_statefulsets.yaml
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.2.9
  creationTimestamp: null
  name: statefulsets.apps.kruise.io
spec:
  additionalPrinterColumns:
  - JSONPath: .spec.replicas
    description: The desired number of pods.
    name: DESIRED
    type: integer
  - JSONPath: .status.replicas
    description: The number of currently all pods.
    name: CURRENT
    type: integer
  - JSONPath: .status.updatedReplicas
    description: The number of pods updated.
    name: UPDATED
    type: integer
  - JSONPath: .status.readyReplicas
    description: The number of pods ready.
    name: READY
    type: integer
  - JSONPath: .metadata.creationTimestamp
    description: CreationTimestamp is a timestamp representing the server time when
      this object was created. It is not guaranteed to be set in happens-before order
      across separate operations. Clients may not set this value. It is represented
      in RFC3339 form and is in UTC.
    name: AGE
    type: date
  group: apps.kruise.io
  names:
    kind: StatefulSet
    listKind: StatefulSetList
    plural: statefulsets
    shortNames:
    - sts
    - asts
    singular: statefulset
  scope: Namespaced
  conversion:
    strategy: Webhook
    webhookClientConfig:
      caBundle: Cg==
      service:
        namespace: kruise-system
        name: kruise-webhook-service
        path: /convert
  preserveUnknownFields: false
  subresources:
    scale:
      labelSelectorPath: .status.labelSelector
      specReplicasPath: .spec.replicas
      statusReplicasPath: .status.replicas
    status: {}
  version: v1alpha1
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: StatefulSet is the Schema for the statefulsets API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: StatefulSetSpec defines the desired state of StatefulSet
            properties:
              podManagementPolicy:
                description: podManagementPolicy controls how pods are created during
                  initial scale up, when replacing pods on nodes, or when scaling
                  down. The default policy is `OrderedReady`, where pods are created
                  in increasing order (pod-0, then pod-1, etc) and the controller
                  will wait until each pod is ready before continuing. When scaling
                  down, the pods are removed in the opposite order. The alternative
                  policy is `Parallel` which will create pods in parallel to match
                  the desired scale without waiting, and on scale down will delete
                  all pods at once.
                type: string
              replicas:
                description: 'replicas is the desired number of replicas of the given
                  Template. These are replicas in the sense that they are instantiations
                  of the same Template, but individual replicas also have a consistent
                  identity. If unspecified, defaults to 1. TODO: Consider a rename
                  of this field.'
                format: int32
                type: integer
              revisionHistoryLimit:
                description: revisionHistoryLimit is the maximum number of revisions
                  that will be maintained in the StatefulSet's revision history. The
                  revision history consists of all revisions not represented by a
                  currently applied StatefulSetSpec version. The default value is
                  10.
                format: int32
                type: integer
              selector:
                description: 'selector is a label query over pods that should match
                  the replica count. It must match the pod template''s labels. More
                  info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors'
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements.
                      The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that
                        contains values, a key, and an operator that relates the key
                        and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies
                            to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to
                            a set of values. Valid operators are In, NotIn, Exists
                            and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the
                            operator is In or NotIn, the values array must be non-empty.
                            If the operator is Exists or DoesNotExist, the values
                            array must be empty. This array is replaced during a strategic
                            merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single
                      {key,value} in the matchLabels map is equivalent to an element
                      of matchExpressions, whose key field is "key", the operator
                      is "In", and the values array contains only "value". The requirements
                      are ANDed.
                    type: object
                type: object
              serviceName:
                description: 'serviceName is the name of the service that governs
                  this StatefulSet. This service must exist before the StatefulSet,
                  and is responsible for the network identity of the set. Pods get
                  DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local
                  where "pod-specific-string" is managed by the StatefulSet controller.'
                type: string
              template:
                description: template is the object that describes the pod that will
                  be created if insufficient replicas are detected. Each pod stamped
                  out by the StatefulSet will fulfill this Template, but have a unique
                  identity from the rest of the StatefulSet.
                type: object
                x-kubernetes-preserve-unknown-fields: true
              updateStrategy:
                description: updateStrategy indicates the StatefulSetUpdateStrategy
                  that will be employed to update Pods in the StatefulSet when a revision
                  is made to Template.
                properties:
                  rollingUpdate:
                    description: RollingUpdate is used to communicate parameters when
                      Type is RollingUpdateStatefulSetStrategyType.
                    properties:
                      inPlaceUpdateStrategy:
                        description: InPlaceUpdateStrategy contains strategies for
                          in-place update.
                        properties:
                          gracePeriodSeconds:
                            description: GracePeriodSeconds is the timespan between
                              set Pod status to not-ready and update images in Pod
                              spec when in-place update a Pod.
                            format: int32
                            type: integer
                        type: object
                      maxUnavailable:
                        anyOf:
                        - type: integer
                        - type: string
                        description: 'The maximum number of pods that can be unavailable
                          during the update. Value can be an absolute number (ex:
                          5) or a percentage of desired pods (ex: 10%). Absolute number
                          is calculated from percentage by rounding down. Also, maxUnavailable
                          can just be allowed to work with Parallel podManagementPolicy.
                          Defaults to 1.'
                        x-kubernetes-int-or-string: true
                      minReadySeconds:
                        description: MinReadySeconds indicates how long will the pod
                          be considered ready after it's updated. MinReadySeconds
                          works with both OrderedReady and Parallel podManagementPolicy.
                          It affects the pod scale up speed when the podManagementPolicy
                          is set to be OrderedReady. Combined with MaxUnavailable,
                          it affects the pod update speed regardless of podManagementPolicy.
                          Default value is 0, max is 300.
                        format: int32
                        type: integer
                      partition:
                        description: 'Partition indicates the ordinal at which the
                          StatefulSet should be partitioned by default. But if unorderedUpdate
                          has been set:   - Partition indicates the number of pods
                          with non-updated revisions when rolling update.   - It means
                          controller will update $(replicas - partition) number of
                          pod. Default value is 0.'
                        format: int32
                        type: integer
                      paused:
                        description: Paused indicates that the StatefulSet is paused.
                          Default value is false
                        type: boolean
                      podUpdatePolicy:
                        description: PodUpdatePolicy indicates how pods should be
                          updated Default value is "ReCreate"
                        type: string
                      unorderedUpdate:
                        description: UnorderedUpdate contains strategies for non-ordered
                          update. If it is not nil, pods will be updated with non-ordered
                          sequence. Noted that UnorderedUpdate can only be allowed
                          to work with Parallel podManagementPolicy
                        properties:
                          priorityStrategy:
                            description: Priorities are the rules for calculating
                              the priority of updating pods. Each pod to be updated,
                              will pass through these terms and get a sum of weights.
                            properties:
                              orderPriority:
                                description: 'Order priority terms, pods will be sorted
                                  by the value of orderedKey. For example: ``` orderPriority:
                                  - orderedKey: key1 - orderedKey: key2 ``` First,
                                  all pods which have key1 in labels will be sorted
                                  by the value of key1. Then, the left pods which
                                  have no key1 but have key2 in labels will be sorted
                                  by the value of key2 and put behind those pods have
                                  key1.'
                                items:
                                  description: UpdatePriorityOrder defines order priority.
                                  properties:
                                    orderedKey:
                                      description: Calculate priority by value of
                                        this key. Values of this key, will be sorted
                                        by GetInt(val). GetInt method will find the
                                        last int in value, such as getting 5 in value
                                        '5', getting 10 in value 'sts-10'.
                                      type: string
                                  required:
                                  - orderedKey
                                  type: object
                                type: array
                              weightPriority:
                                description: Weight priority terms, pods will be sorted
                                  by the sum of all terms weight.
                                items:
                                  description: UpdatePriorityWeightTerm defines weight
                                    priority.
                                  properties:
                                    matchSelector:
                                      description: MatchSelector is used to select
                                        by pod's labels.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list
                                            of label selector requirements. The requirements
                                            are ANDed.
                                          items:
                                            description: A label selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: key is the label key
                                                  that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a
                                                  key's relationship to a set of values.
                                                  Valid operators are In, NotIn, Exists
                                                  and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of
                                                  string values. If the operator is
                                                  In or NotIn, the values array must
                                                  be non-empty. If the operator is
                                                  Exists or DoesNotExist, the values
                                                  array must be empty. This array
                                                  is replaced during a strategic merge
                                                  patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value}
                                            pairs. A single {key,value} in the matchLabels
                                            map is equivalent to an element of matchExpressions,
                                            whose key field is "key", the operator
                                            is "In", and the values array contains
                                            only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                    weight:
                                      description: Weight associated with matching
                                        the corresponding matchExpressions, in the
                                        range 1-100.
                                      format: int32
                                      type: integer
                                  required:
                                  - matchSelector
                                  - weight
                                  type: object
                                type: array
                            type: object
                        type: object
                    type: object
                  type:
                    description: Type indicates the type of the StatefulSetUpdateStrategy.
                      Default is RollingUpdate.
                    type: string
                type: object
              volumeClaimTemplates:
                description: 'volumeClaimTemplates is a list of claims that pods are
                  allowed to reference. The StatefulSet controller is responsible
                  for mapping network identities to claims in a way that maintains
                  the identity of a pod. Every claim in this list must have at least
                  one matching (by name) volumeMount in one container in the template.
                  A claim in this list takes precedence over any volumes in the template,
                  with the same name. TODO: Define the behavior if a claim already
                  exists with the same name.'
                items:
                  description: PersistentVolumeClaim is a user's request for and claim
                    to a persistent volume
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                type: array
            required:
            - selector
            - template
            type: object
          status:
            description: StatefulSetStatus defines the observed state of StatefulSet
            properties:
              availableReplicas:
                description: AvailableReplicas is the number of Pods created by the
                  StatefulSet controller that have been ready for minReadySeconds.
                format: int32
                type: integer
              collisionCount:
                description: collisionCount is the count of hash collisions for the
                  StatefulSet. The StatefulSet controller uses this field as a collision
                  avoidance mechanism when it needs to create the name for the newest
                  ControllerRevision.
                format: int32
                type: integer
              conditions:
                description: Represents the latest available observations of a statefulset's
                  current state.
                items:
                  description: StatefulSetCondition describes the state of a statefulset
                    at a certain point.
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                type: array
              currentReplicas:
                description: currentReplicas is the number of Pods created by the
                  StatefulSet controller from the StatefulSet version indicated by
                  currentRevision.
                format: int32
                type: integer
              currentRevision:
                description: currentRevision, if not empty, indicates the version
                  of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).
                type: string
              labelSelector:
                description: LabelSelector is label selectors for query over pods
                  that should match the replica count used by HPA.
                type: string
              observedGeneration:
                description: observedGeneration is the most recent generation observed
                  for this StatefulSet. It corresponds to the StatefulSet's generation,
                  which is updated on mutation by the API Server.
                format: int64
                type: integer
              readyReplicas:
                description: readyReplicas is the number of Pods created by the StatefulSet
                  controller that have a Ready Condition.
                format: int32
                type: integer
              replicas:
                description: replicas is the number of Pods created by the StatefulSet
                  controller.
                format: int32
                type: integer
              updateRevision:
                description: updateRevision, if not empty, indicates the version of
                  the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)
                type: string
              updatedReplicas:
                description: updatedReplicas is the number of Pods created by the
                  StatefulSet controller from the StatefulSet version indicated by
                  updateRevision.
                format: int32
                type: integer
            required:
            - availableReplicas
            - currentReplicas
            - readyReplicas
            - replicas
            - updatedReplicas
            type: object
        type: object
    served: true
    storage: false
  - name: v1beta1
    schema:
      openAPIV3Schema:
        description: StatefulSet is the Schema for the statefulsets API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: StatefulSetSpec defines the desired state of StatefulSet
            properties:
              podManagementPolicy:
                description: podManagementPolicy controls how pods are created during
                  initial scale up, when replacing pods on nodes, or when scaling
                  down. The default policy is `OrderedReady`, where pods are created
                  in increasing order (pod-0, then pod-1, etc) and the controller
                  will wait until each pod is ready before continuing. When scaling
                  down, the pods are removed in the opposite order. The alternative
                  policy is `Parallel` which will create pods in parallel to match
                  the desired scale without waiting, and on scale down will delete
                  all pods at once.
                type: string
              replicas:
                description: 'replicas is the desired number of replicas of the given
                  Template. These are replicas in the sense that they are instantiations
                  of the same Template, but individual replicas also have a consistent
                  identity. If unspecified, defaults to 1. TODO: Consider a rename
                  of this field.'
                format: int32
                type: integer
              reserveOrdinals:
                description: 'reserveOrdinals controls the ordinal numbers that should
                  be reserved, and the replicas will always be the expectation number
                  of running Pods. For a sts with replicas=3 and its Pods in [0, 1,
                  2]: - If you want to migrate Pod-1 and reserve this ordinal, just
                  set spec.reserveOrdinal to [1].   Then controller will delete Pod-1
                  and create Pod-3 (existing Pods will be [0, 2, 3]) - If you just
                  want to delete Pod-1, you should set spec.reserveOrdinal to [1]
                  and spec.replicas to 2.   Then controller will delete Pod-1 (existing
                  Pods will be [0, 2])'
                items:
                  type: integer
                type: array
              revisionHistoryLimit:
                description: revisionHistoryLimit is the maximum number of revisions
                  that will be maintained in the StatefulSet's revision history. The
                  revision history consists of all revisions not represented by a
                  currently applied StatefulSetSpec version. The default value is
                  10.
                format: int32
                type: integer
              selector:
                description: 'selector is a label query over pods that should match
                  the replica count. It must match the pod template''s labels. More
                  info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors'
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements.
                      The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that
                        contains values, a key, and an operator that relates the key
                        and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies
                            to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to
                            a set of values. Valid operators are In, NotIn, Exists
                            and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the
                            operator is In or NotIn, the values array must be non-empty.
                            If the operator is Exists or DoesNotExist, the values
                            array must be empty. This array is replaced during a strategic
                            merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single
                      {key,value} in the matchLabels map is equivalent to an element
                      of matchExpressions, whose key field is "key", the operator
                      is "In", and the values array contains only "value". The requirements
                      are ANDed.
                    type: object
                type: object
              serviceName:
                description: 'serviceName is the name of the service that governs
                  this StatefulSet. This service must exist before the StatefulSet,
                  and is responsible for the network identity of the set. Pods get
                  DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local
                  where "pod-specific-string" is managed by the StatefulSet controller.'
                type: string
              template:
                description: template is the object that describes the pod that will
                  be created if insufficient replicas are detected. Each pod stamped
                  out by the StatefulSet will fulfill this Template, but have a unique
                  identity from the rest of the StatefulSet.
                type: object
                x-kubernetes-preserve-unknown-fields: true
              updateStrategy:
                description: updateStrategy indicates the StatefulSetUpdateStrategy
                  that will be employed to update Pods in the StatefulSet when a revision
                  is made to Template.
                properties:
                  rollingUpdate:
                    description: RollingUpdate is used to communicate parameters when
                      Type is RollingUpdateStatefulSetStrategyType.
                    properties:
                      inPlaceUpdateStrategy:
                        description: InPlaceUpdateStrategy contains strategies for
                          in-place update.
                        properties:
                          gracePeriodSeconds:
                            description: GracePeriodSeconds is the timespan between
                              set Pod status to not-ready and update images in Pod
                              spec when in-place update a Pod.
                            format: int32
                            type: integer
                        type: object
                      maxUnavailable:
                        anyOf:
                        - type: integer
                        - type: string
                        description: 'The maximum number of pods that can be unavailable
                          during the update. Value can be an absolute number (ex:
                          5) or a percentage of desired pods (ex: 10%). Absolute number
                          is calculated from percentage by rounding down. Also, maxUnavailable
                          can just be allowed to work with Parallel podManagementPolicy.
                          Defaults to 1.'
                        x-kubernetes-int-or-string: true
                      minReadySeconds:
                        description: MinReadySeconds indicates how long will the pod
                          be considered ready after it's updated. MinReadySeconds
                          works with both OrderedReady and Parallel podManagementPolicy.
                          It affects the pod scale up speed when the podManagementPolicy
                          is set to be OrderedReady. Combined with MaxUnavailable,
                          it affects the pod update speed regardless of podManagementPolicy.
                          Default value is 0, max is 300.
                        format: int32
                        type: integer
                      partition:
                        description: 'Partition indicates the ordinal at which the
                          StatefulSet should be partitioned by default. But if unorderedUpdate
                          has been set:   - Partition indicates the number of pods
                          with non-updated revisions when rolling update.   - It means
                          controller will update $(replicas - partition) number of
                          pod. Default value is 0.'
                        format: int32
                        type: integer
                      paused:
                        description: Paused indicates that the StatefulSet is paused.
                          Default value is false
                        type: boolean
                      podUpdatePolicy:
                        description: PodUpdatePolicy indicates how pods should be
                          updated Default value is "ReCreate"
                        type: string
                      unorderedUpdate:
                        description: UnorderedUpdate contains strategies for non-ordered
                          update. If it is not nil, pods will be updated with non-ordered
                          sequence. Noted that UnorderedUpdate can only be allowed
                          to work with Parallel podManagementPolicy
                        properties:
                          priorityStrategy:
                            description: Priorities are the rules for calculating
                              the priority of updating pods. Each pod to be updated,
                              will pass through these terms and get a sum of weights.
                            properties:
                              orderPriority:
                                description: 'Order priority terms, pods will be sorted
                                  by the value of orderedKey. For example: ``` orderPriority:
                                  - orderedKey: key1 - orderedKey: key2 ``` First,
                                  all pods which have key1 in labels will be sorted
                                  by the value of key1. Then, the left pods which
                                  have no key1 but have key2 in labels will be sorted
                                  by the value of key2 and put behind those pods have
                                  key1.'
                                items:
                                  description: UpdatePriorityOrder defines order priority.
                                  properties:
                                    orderedKey:
                                      description: Calculate priority by value of
                                        this key. Values of this key, will be sorted
                                        by GetInt(val). GetInt method will find the
                                        last int in value, such as getting 5 in value
                                        '5', getting 10 in value 'sts-10'.
                                      type: string
                                  required:
                                  - orderedKey
                                  type: object
                                type: array
                              weightPriority:
                                description: Weight priority terms, pods will be sorted
                                  by the sum of all terms weight.
                                items:
                                  description: UpdatePriorityWeightTerm defines weight
                                    priority.
                                  properties:
                                    matchSelector:
                                      description: MatchSelector is used to select
                                        by pod's labels.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list
                                            of label selector requirements. The requirements
                                            are ANDed.
                                          items:
                                            description: A label selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: key is the label key
                                                  that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a
                                                  key's relationship to a set of values.
                                                  Valid operators are In, NotIn, Exists
                                                  and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of
                                                  string values. If the operator is
                                                  In or NotIn, the values array must
                                                  be non-empty. If the operator is
                                                  Exists or DoesNotExist, the values
                                                  array must be empty. This array
                                                  is replaced during a strategic merge
                                                  patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value}
                                            pairs. A single {key,value} in the matchLabels
                                            map is equivalent to an element of matchExpressions,
                                            whose key field is "key", the operator
                                            is "In", and the values array contains
                                            only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                    weight:
                                      description: Weight associated with matching
                                        the corresponding matchExpressions, in the
                                        range 1-100.
                                      format: int32
                                      type: integer
                                  required:
                                  - matchSelector
                                  - weight
                                  type: object
                                type: array
                            type: object
                        type: object
                    type: object
                  type:
                    description: Type indicates the type of the StatefulSetUpdateStrategy.
                      Default is RollingUpdate.
                    type: string
                type: object
              volumeClaimTemplates:
                description: 'volumeClaimTemplates is a list of claims that pods are
                  allowed to reference. The StatefulSet controller is responsible
                  for mapping network identities to claims in a way that maintains
                  the identity of a pod. Every claim in this list must have at least
                  one matching (by name) volumeMount in one container in the template.
                  A claim in this list takes precedence over any volumes in the template,
                  with the same name. TODO: Define the behavior if a claim already
                  exists with the same name.'
                items:
                  description: PersistentVolumeClaim is a user's request for and claim
                    to a persistent volume
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                type: array
            required:
            - selector
            - template
            type: object
          status:
            description: StatefulSetStatus defines the observed state of StatefulSet
            properties:
              availableReplicas:
                description: AvailableReplicas is the number of Pods created by the
                  StatefulSet controller that have been ready for minReadySeconds.
                format: int32
                type: integer
              collisionCount:
                description: collisionCount is the count of hash collisions for the
                  StatefulSet. The StatefulSet controller uses this field as a collision
                  avoidance mechanism when it needs to create the name for the newest
                  ControllerRevision.
                format: int32
                type: integer
              conditions:
                description: Represents the latest available observations of a statefulset's
                  current state.
                items:
                  description: StatefulSetCondition describes the state of a statefulset
                    at a certain point.
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                type: array
              currentReplicas:
                description: currentReplicas is the number of Pods created by the
                  StatefulSet controller from the StatefulSet version indicated by
                  currentRevision.
                format: int32
                type: integer
              currentRevision:
                description: currentRevision, if not empty, indicates the version
                  of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).
                type: string
              labelSelector:
                description: LabelSelector is label selectors for query over pods
                  that should match the replica count used by HPA.
                type: string
              observedGeneration:
                description: observedGeneration is the most recent generation observed
                  for this StatefulSet. It corresponds to the StatefulSet's generation,
                  which is updated on mutation by the API Server.
                format: int64
                type: integer
              readyReplicas:
                description: readyReplicas is the number of Pods created by the StatefulSet
                  controller that have a Ready Condition.
                format: int32
                type: integer
              replicas:
                description: replicas is the number of Pods created by the StatefulSet
                  controller.
                format: int32
                type: integer
              updateRevision:
                description: updateRevision, if not empty, indicates the version of
                  the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)
                type: string
              updatedReplicas:
                description: updatedReplicas is the number of Pods created by the
                  StatefulSet controller from the StatefulSet version indicated by
                  updateRevision.
                format: int32
                type: integer
            required:
            - availableReplicas
            - currentReplicas
            - readyReplicas
            - replicas
            - updatedReplicas
            type: object
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: kruise/templates/apps.kruise.io_uniteddeployments.yaml
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.2.9
  creationTimestamp: null
  name: uniteddeployments.apps.kruise.io
spec:
  additionalPrinterColumns:
  - JSONPath: .spec.replicas
    description: The desired number of pods.
    name: DESIRED
    type: integer
  - JSONPath: .status.replicas
    description: The number of currently all pods.
    name: CURRENT
    type: integer
  - JSONPath: .status.updatedReplicas
    description: The number of pods updated.
    name: UPDATED
    type: integer
  - JSONPath: .status.readyReplicas
    description: The number of pods ready.
    name: READY
    type: integer
  - JSONPath: .metadata.creationTimestamp
    description: CreationTimestamp is a timestamp representing the server time when
      this object was created. It is not guaranteed to be set in happens-before order
      across separate operations. Clients may not set this value. It is represented
      in RFC3339 form and is in UTC.
    name: AGE
    type: date
  group: apps.kruise.io
  names:
    kind: UnitedDeployment
    listKind: UnitedDeploymentList
    plural: uniteddeployments
    shortNames:
    - ud
    singular: uniteddeployment
  scope: Namespaced
  subresources:
    scale:
      labelSelectorPath: .status.selector
      specReplicasPath: .spec.replicas
      statusReplicasPath: .status.replicas
    status: {}
  validation:
    openAPIV3Schema:
      description: UnitedDeployment is the Schema for the uniteddeployments API
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: UnitedDeploymentSpec defines the desired state of UnitedDeployment.
          properties:
            replicas:
              description: Replicas is the total desired replicas of all the subsets.
                If unspecified, defaults to 1.
              format: int32
              type: integer
            revisionHistoryLimit:
              description: Indicates the number of histories to be conserved. If unspecified,
                defaults to 10.
              format: int32
              type: integer
            selector:
              description: Selector is a label query over pods that should match the
                replica count. It must match the pod template's labels.
              properties:
                matchExpressions:
                  description: matchExpressions is a list of label selector requirements.
                    The requirements are ANDed.
                  items:
                    description: A label selector requirement is a selector that contains
                      values, a key, and an operator that relates the key and values.
                    properties:
                      key:
                        description: key is the label key that the selector applies
                          to.
                        type: string
                      operator:
                        description: operator represents a key's relationship to a
                          set of values. Valid operators are In, NotIn, Exists and
                          DoesNotExist.
                        type: string
                      values:
                        description: values is an array of string values. If the operator
                          is In or NotIn, the values array must be non-empty. If the
                          operator is Exists or DoesNotExist, the values array must
                          be empty. This array is replaced during a strategic merge
                          patch.
                        items:
                          type: string
                        type: array
                    required:
                    - key
                    - operator
                    type: object
                  type: array
                matchLabels:
                  additionalProperties:
                    type: string
                  description: matchLabels is a map of {key,value} pairs. A single
                    {key,value} in the matchLabels map is equivalent to an element
                    of matchExpressions, whose key field is "key", the operator is
                    "In", and the values array contains only "value". The requirements
                    are ANDed.
                  type: object
              type: object
            template:
              description: Template describes the subset that will be created.
              properties:
                advancedStatefulSetTemplate:
                  description: AdvancedStatefulSet template
                  properties:
                    metadata:
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    spec:
                      description: StatefulSetSpec defines the desired state of StatefulSet
                      properties:
                        podManagementPolicy:
                          description: podManagementPolicy controls how pods are created
                            during initial scale up, when replacing pods on nodes,
                            or when scaling down. The default policy is `OrderedReady`,
                            where pods are created in increasing order (pod-0, then
                            pod-1, etc) and the controller will wait until each pod
                            is ready before continuing. When scaling down, the pods
                            are removed in the opposite order. The alternative policy
                            is `Parallel` which will create pods in parallel to match
                            the desired scale without waiting, and on scale down will
                            delete all pods at once.
                          type: string
                        replicas:
                          description: 'replicas is the desired number of replicas
                            of the given Template. These are replicas in the sense
                            that they are instantiations of the same Template, but
                            individual replicas also have a consistent identity. If
                            unspecified, defaults to 1. TODO: Consider a rename of
                            this field.'
                          format: int32
                          type: integer
                        revisionHistoryLimit:
                          description: revisionHistoryLimit is the maximum number
                            of revisions that will be maintained in the StatefulSet's
                            revision history. The revision history consists of all
                            revisions not represented by a currently applied StatefulSetSpec
                            version. The default value is 10.
                          format: int32
                          type: integer
                        selector:
                          description: 'selector is a label query over pods that should
                            match the replica count. It must match the pod template''s
                            labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors'
                          properties:
                            matchExpressions:
                              description: matchExpressions is a list of label selector
                                requirements. The requirements are ANDed.
                              items:
                                description: A label selector requirement is a selector
                                  that contains values, a key, and an operator that
                                  relates the key and values.
                                properties:
                                  key:
                                    description: key is the label key that the selector
                                      applies to.
                                    type: string
                                  operator:
                                    description: operator represents a key's relationship
                                      to a set of values. Valid operators are In,
                                      NotIn, Exists and DoesNotExist.
                                    type: string
                                  values:
                                    description: values is an array of string values.
                                      If the operator is In or NotIn, the values array
                                      must be non-empty. If the operator is Exists
                                      or DoesNotExist, the values array must be empty.
                                      This array is replaced during a strategic merge
                                      patch.
                                    items:
                                      type: string
                                    type: array
                                required:
                                - key
                                - operator
                                type: object
                              type: array
                            matchLabels:
                              additionalProperties:
                                type: string
                              description: matchLabels is a map of {key,value} pairs.
                                A single {key,value} in the matchLabels map is equivalent
                                to an element of matchExpressions, whose key field
                                is "key", the operator is "In", and the values array
                                contains only "value". The requirements are ANDed.
                              type: object
                          type: object
                        serviceName:
                          description: 'serviceName is the name of the service that
                            governs this StatefulSet. This service must exist before
                            the StatefulSet, and is responsible for the network identity
                            of the set. Pods get DNS/hostnames that follow the pattern:
                            pod-specific-string.serviceName.default.svc.cluster.local
                            where "pod-specific-string" is managed by the StatefulSet
                            controller.'
                          type: string
                        template:
                          description: template is the object that describes the pod
                            that will be created if insufficient replicas are detected.
                            Each pod stamped out by the StatefulSet will fulfill this
                            Template, but have a unique identity from the rest of
                            the StatefulSet.
                          type: object
                          x-kubernetes-preserve-unknown-fields: true
                        updateStrategy:
                          description: updateStrategy indicates the StatefulSetUpdateStrategy
                            that will be employed to update Pods in the StatefulSet
                            when a revision is made to Template.
                          properties:
                            rollingUpdate:
                              description: RollingUpdate is used to communicate parameters
                                when Type is RollingUpdateStatefulSetStrategyType.
                              properties:
                                inPlaceUpdateStrategy:
                                  description: InPlaceUpdateStrategy contains strategies
                                    for in-place update.
                                  properties:
                                    gracePeriodSeconds:
                                      description: GracePeriodSeconds is the timespan
                                        between set Pod status to not-ready and update
                                        images in Pod spec when in-place update a
                                        Pod.
                                      format: int32
                                      type: integer
                                  type: object
                                maxUnavailable:
                                  anyOf:
                                  - type: integer
                                  - type: string
                                  description: 'The maximum number of pods that can
                                    be unavailable during the update. Value can be
                                    an absolute number (ex: 5) or a percentage of
                                    desired pods (ex: 10%). Absolute number is calculated
                                    from percentage by rounding down. Also, maxUnavailable
                                    can just be allowed to work with Parallel podManagementPolicy.
                                    Defaults to 1.'
                                  x-kubernetes-int-or-string: true
                                minReadySeconds:
                                  description: MinReadySeconds indicates how long
                                    will the pod be considered ready after it's updated.
                                    MinReadySeconds works with both OrderedReady and
                                    Parallel podManagementPolicy. It affects the pod
                                    scale up speed when the podManagementPolicy is
                                    set to be OrderedReady. Combined with MaxUnavailable,
                                    it affects the pod update speed regardless of
                                    podManagementPolicy. Default value is 0, max is
                                    300.
                                  format: int32
                                  type: integer
                                partition:
                                  description: 'Partition indicates the ordinal at
                                    which the StatefulSet should be partitioned by
                                    default. But if unorderedUpdate has been set:   -
                                    Partition indicates the number of pods with non-updated
                                    revisions when rolling update.   - It means controller
                                    will update $(replicas - partition) number of
                                    pod. Default value is 0.'
                                  format: int32
                                  type: integer
                                paused:
                                  description: Paused indicates that the StatefulSet
                                    is paused. Default value is false
                                  type: boolean
                                podUpdatePolicy:
                                  description: PodUpdatePolicy indicates how pods
                                    should be updated Default value is "ReCreate"
                                  type: string
                                unorderedUpdate:
                                  description: UnorderedUpdate contains strategies
                                    for non-ordered update. If it is not nil, pods
                                    will be updated with non-ordered sequence. Noted
                                    that UnorderedUpdate can only be allowed to work
                                    with Parallel podManagementPolicy
                                  properties:
                                    priorityStrategy:
                                      description: Priorities are the rules for calculating
                                        the priority of updating pods. Each pod to
                                        be updated, will pass through these terms
                                        and get a sum of weights.
                                      properties:
                                        orderPriority:
                                          description: 'Order priority terms, pods
                                            will be sorted by the value of orderedKey.
                                            For example: ``` orderPriority: - orderedKey:
                                            key1 - orderedKey: key2 ``` First, all
                                            pods which have key1 in labels will be
                                            sorted by the value of key1. Then, the
                                            left pods which have no key1 but have
                                            key2 in labels will be sorted by the value
                                            of key2 and put behind those pods have
                                            key1.'
                                          items:
                                            description: UpdatePriorityOrder defines
                                              order priority.
                                            properties:
                                              orderedKey:
                                                description: Calculate priority by
                                                  value of this key. Values of this
                                                  key, will be sorted by GetInt(val).
                                                  GetInt method will find the last
                                                  int in value, such as getting 5
                                                  in value '5', getting 10 in value
                                                  'sts-10'.
                                                type: string
                                            required:
                                            - orderedKey
                                            type: object
                                          type: array
                                        weightPriority:
                                          description: Weight priority terms, pods
                                            will be sorted by the sum of all terms
                                            weight.
                                          items:
                                            description: UpdatePriorityWeightTerm
                                              defines weight priority.
                                            properties:
                                              matchSelector:
                                                description: MatchSelector is used
                                                  to select by pod's labels.
                                                properties:
                                                  matchExpressions:
                                                    description: matchExpressions
                                                      is a list of label selector
                                                      requirements. The requirements
                                                      are ANDed.
                                                    items:
                                                      description: A label selector
                                                        requirement is a selector
                                                        that contains values, a key,
                                                        and an operator that relates
                                                        the key and values.
                                                      properties:
                                                        key:
                                                          description: key is the
                                                            label key that the selector
                                                            applies to.
                                                          type: string
                                                        operator:
                                                          description: operator represents
                                                            a key's relationship to
                                                            a set of values. Valid
                                                            operators are In, NotIn,
                                                            Exists and DoesNotExist.
                                                          type: string
                                                        values:
                                                          description: values is an
                                                            array of string values.
                                                            If the operator is In
                                                            or NotIn, the values array
                                                            must be non-empty. If
                                                            the operator is Exists
                                                            or DoesNotExist, the values
                                                            array must be empty. This
                                                            array is replaced during
                                                            a strategic merge patch.
                                                          items:
                                                            type: string
                                                          type: array
                                                      required:
                                                      - key
                                                      - operator
                                                      type: object
                                                    type: array
                                                  matchLabels:
                                                    additionalProperties:
                                                      type: string
                                                    description: matchLabels is a
                                                      map of {key,value} pairs. A
                                                      single {key,value} in the matchLabels
                                                      map is equivalent to an element
                                                      of matchExpressions, whose key
                                                      field is "key", the operator
                                                      is "In", and the values array
                                                      contains only "value". The requirements
                                                      are ANDed.
                                                    type: object
                                                type: object
                                              weight:
                                                description: Weight associated with
                                                  matching the corresponding matchExpressions,
                                                  in the range 1-100.
                                                format: int32
                                                type: integer
                                            required:
                                            - matchSelector
                                            - weight
                                            type: object
                                          type: array
                                      type: object
                                  type: object
                              type: object
                            type:
                              description: Type indicates the type of the StatefulSetUpdateStrategy.
                                Default is RollingUpdate.
                              type: string
                          type: object
                        volumeClaimTemplates:
                          description: 'volumeClaimTemplates is a list of claims that
                            pods are allowed to reference. The StatefulSet controller
                            is responsible for mapping network identities to claims
                            in a way that maintains the identity of a pod. Every claim
                            in this list must have at least one matching (by name)
                            volumeMount in one container in the template. A claim
                            in this list takes precedence over any volumes in the
                            template, with the same name. TODO: Define the behavior
                            if a claim already exists with the same name.'
                          items:
                            description: PersistentVolumeClaim is a user's request
                              for and claim to a persistent volume
                            type: object
                            x-kubernetes-preserve-unknown-fields: true
                          type: array
                      required:
                      - selector
                      - template
                      type: object
                  required:
                  - spec
                  type: object
                cloneSetTemplate:
                  description: CloneSet template
                  properties:
                    metadata:
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    spec:
                      description: CloneSetSpec defines the desired state of CloneSet
                      properties:
                        lifecycle:
                          description: Lifecycle defines the lifecycle hooks for Pods
                            pre-delete, in-place update.
                          properties:
                            inPlaceUpdate:
                              description: InPlaceUpdate is the hook before Pod to
                                update and after Pod has been updated.
                              properties:
                                finalizersHandler:
                                  items:
                                    type: string
                                  type: array
                                labelsHandler:
                                  additionalProperties:
                                    type: string
                                  type: object
                              type: object
                            preDelete:
                              description: PreDelete is the hook before Pod to be
                                deleted.
                              properties:
                                finalizersHandler:
                                  items:
                                    type: string
                                  type: array
                                labelsHandler:
                                  additionalProperties:
                                    type: string
                                  type: object
                              type: object
                          type: object
                        minReadySeconds:
                          description: Minimum number of seconds for which a newly
                            created pod should be ready without any of its container
                            crashing, for it to be considered available. Defaults
                            to 0 (pod will be considered available as soon as it is
                            ready)
                          format: int32
                          type: integer
                        replicas:
                          description: Replicas is the desired number of replicas
                            of the given Template. These are replicas in the sense
                            that they are instantiations of the same Template. If
                            unspecified, defaults to 1.
                          format: int32
                          type: integer
                        revisionHistoryLimit:
                          description: RevisionHistoryLimit is the maximum number
                            of revisions that will be maintained in the CloneSet's
                            revision history. The revision history consists of all
                            revisions not represented by a currently applied CloneSetSpec
                            version. The default value is 10.
                          format: int32
                          type: integer
                        scaleStrategy:
                          description: ScaleStrategy indicates the ScaleStrategy that
                            will be employed to create and delete Pods in the CloneSet.
                          properties:
                            podsToDelete:
                              description: PodsToDelete is the names of Pod should
                                be deleted. Note that this list will be truncated
                                for non-existing pod names.
                              items:
                                type: string
                              type: array
                          type: object
                        selector:
                          description: 'Selector is a label query over pods that should
                            match the replica count. It must match the pod template''s
                            labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors'
                          properties:
                            matchExpressions:
                              description: matchExpressions is a list of label selector
                                requirements. The requirements are ANDed.
                              items:
                                description: A label selector requirement is a selector
                                  that contains values, a key, and an operator that
                                  relates the key and values.
                                properties:
                                  key:
                                    description: key is the label key that the selector
                                      applies to.
                                    type: string
                                  operator:
                                    description: operator represents a key's relationship
                                      to a set of values. Valid operators are In,
                                      NotIn, Exists and DoesNotExist.
                                    type: string
                                  values:
                                    description: values is an array of string values.
                                      If the operator is In or NotIn, the values array
                                      must be non-empty. If the operator is Exists
                                      or DoesNotExist, the values array must be empty.
                                      This array is replaced during a strategic merge
                                      patch.
                                    items:
                                      type: string
                                    type: array
                                required:
                                - key
                                - operator
                                type: object
                              type: array
                            matchLabels:
                              additionalProperties:
                                type: string
                              description: matchLabels is a map of {key,value} pairs.
                                A single {key,value} in the matchLabels map is equivalent
                                to an element of matchExpressions, whose key field
                                is "key", the operator is "In", and the values array
                                contains only "value". The requirements are ANDed.
                              type: object
                          type: object
                        template:
                          description: Template describes the pods that will be created.
                          type: object
                          x-kubernetes-preserve-unknown-fields: true
                        updateStrategy:
                          description: UpdateStrategy indicates the UpdateStrategy
                            that will be employed to update Pods in the CloneSet when
                            a revision is made to Template.
                          properties:
                            inPlaceUpdateStrategy:
                              description: InPlaceUpdateStrategy contains strategies
                                for in-place update.
                              properties:
                                gracePeriodSeconds:
                                  description: GracePeriodSeconds is the timespan
                                    between set Pod status to not-ready and update
                                    images in Pod spec when in-place update a Pod.
                                  format: int32
                                  type: integer
                              type: object
                            maxSurge:
                              anyOf:
                              - type: integer
                              - type: string
                              description: 'The maximum number of pods that can be
                                scheduled above the desired replicas during the update.
                                Value can be an absolute number (ex: 5) or a percentage
                                of desired pods (ex: 10%). Absolute number is calculated
                                from percentage by rounding up. Defaults to 0.'
                              x-kubernetes-int-or-string: true
                            maxUnavailable:
                              anyOf:
                              - type: integer
                              - type: string
                              description: 'The maximum number of pods that can be
                                unavailable during the update. Value can be an absolute
                                number (ex: 5) or a percentage of desired pods (ex:
                                10%). Absolute number is calculated from percentage
                                by rounding up by default. When maxSurge > 0, absolute
                                number is calculated from percentage by rounding down.
                                Defaults to 20%.'
                              x-kubernetes-int-or-string: true
                            partition:
                              anyOf:
                              - type: integer
                              - type: string
                              description: 'Partition is the desired number of pods
                                in old revisions. Value can be an absolute number
                                (ex: 5) or a percentage of desired pods (ex: 10%).
                                Absolute number is calculated from percentage by rounding
                                up by default. It means when partition is set during
                                pods updating, (replicas - partition value) number
                                of pods will be updated. Default value is 0.'
                              x-kubernetes-int-or-string: true
                            paused:
                              description: Paused indicates that the CloneSet is paused.
                                Default value is false
                              type: boolean
                            priorityStrategy:
                              description: Priorities are the rules for calculating
                                the priority of updating pods. Each pod to be updated,
                                will pass through these terms and get a sum of weights.
                              properties:
                                orderPriority:
                                  description: 'Order priority terms, pods will be
                                    sorted by the value of orderedKey. For example:
                                    ``` orderPriority: - orderedKey: key1 - orderedKey:
                                    key2 ``` First, all pods which have key1 in labels
                                    will be sorted by the value of key1. Then, the
                                    left pods which have no key1 but have key2 in
                                    labels will be sorted by the value of key2 and
                                    put behind those pods have key1.'
                                  items:
                                    description: UpdatePriorityOrder defines order
                                      priority.
                                    properties:
                                      orderedKey:
                                        description: Calculate priority by value of
                                          this key. Values of this key, will be sorted
                                          by GetInt(val). GetInt method will find
                                          the last int in value, such as getting 5
                                          in value '5', getting 10 in value 'sts-10'.
                                        type: string
                                    required:
                                    - orderedKey
                                    type: object
                                  type: array
                                weightPriority:
                                  description: Weight priority terms, pods will be
                                    sorted by the sum of all terms weight.
                                  items:
                                    description: UpdatePriorityWeightTerm defines
                                      weight priority.
                                    properties:
                                      matchSelector:
                                        description: MatchSelector is used to select
                                          by pod's labels.
                                        properties:
                                          matchExpressions:
                                            description: matchExpressions is a list
                                              of label selector requirements. The
                                              requirements are ANDed.
                                            items:
                                              description: A label selector requirement
                                                is a selector that contains values,
                                                a key, and an operator that relates
                                                the key and values.
                                              properties:
                                                key:
                                                  description: key is the label key
                                                    that the selector applies to.
                                                  type: string
                                                operator:
                                                  description: operator represents
                                                    a key's relationship to a set
                                                    of values. Valid operators are
                                                    In, NotIn, Exists and DoesNotExist.
                                                  type: string
                                                values:
                                                  description: values is an array
                                                    of string values. If the operator
                                                    is In or NotIn, the values array
                                                    must be non-empty. If the operator
                                                    is Exists or DoesNotExist, the
                                                    values array must be empty. This
                                                    array is replaced during a strategic
                                                    merge patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                              - key
                                              - operator
                                              type: object
                                            type: array
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            description: matchLabels is a map of {key,value}
                                              pairs. A single {key,value} in the matchLabels
                                              map is equivalent to an element of matchExpressions,
                                              whose key field is "key", the operator
                                              is "In", and the values array contains
                                              only "value". The requirements are ANDed.
                                            type: object
                                        type: object
                                      weight:
                                        description: Weight associated with matching
                                          the corresponding matchExpressions, in the
                                          range 1-100.
                                        format: int32
                                        type: integer
                                    required:
                                    - matchSelector
                                    - weight
                                    type: object
                                  type: array
                              type: object
                            scatterStrategy:
                              description: ScatterStrategy defines the scatter rules
                                to make pods been scattered when update. This will
                                avoid pods with the same key-value to be updated in
                                one batch. - Note that pods will be scattered after
                                priority sort. So, although priority strategy and
                                scatter strategy can be applied together, we suggest
                                to use either one of them. - If scatterStrategy is
                                used, we suggest to just use one term. Otherwise,
                                the update order can be hard to understand.
                              items:
                                properties:
                                  key:
                                    type: string
                                  value:
                                    type: string
                                required:
                                - key
                                - value
                                type: object
                              type: array
                            type:
                              description: Type indicates the type of the CloneSetUpdateStrategy.
                                Default is ReCreate.
                              type: string
                          type: object
                        volumeClaimTemplates:
                          description: VolumeClaimTemplates is a list of claims that
                            pods are allowed to reference. Note that PVC will be deleted
                            when its pod has been deleted.
                          items:
                            description: PersistentVolumeClaim is a user's request
                              for and claim to a persistent volume
                            type: object
                            x-kubernetes-preserve-unknown-fields: true
                          type: array
                      required:
                      - selector
                      - template
                      type: object
                  required:
                  - spec
                  type: object
                statefulSetTemplate:
                  description: StatefulSet template
                  properties:
                    metadata:
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    spec:
                      description: A StatefulSetSpec is the specification of a StatefulSet.
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                  required:
                  - spec
                  type: object
              type: object
            topology:
              description: Topology describes the pods distribution detail between
                each of subsets.
              properties:
                subsets:
                  description: Contains the details of each subset. Each element in
                    this array represents one subset which will be provisioned and
                    managed by UnitedDeployment.
                  items:
                    description: Subset defines the detail of a subset.
                    properties:
                      name:
                        description: Indicates subset name as a DNS_LABEL, which will
                          be used to generate subset workload name prefix in the format
                          '<deployment-name>-<subset-name>-'. Name should be unique
                          between all of the subsets under one UnitedDeployment.
                        type: string
                      nodeSelectorTerm:
                        description: Indicates the node selector to form the subset.
                          Depending on the node selector, pods provisioned could be
                          distributed across multiple groups of nodes. A subset's
                          nodeSelectorTerm is not allowed to be updated.
                        type: object
                        x-kubernetes-preserve-unknown-fields: true
                      replicas:
                        anyOf:
                        - type: integer
                        - type: string
                        description: Indicates the number of the pod to be created
                          under this subset. Replicas could also be percentage like
                          '10%', which means 10% of UnitedDeployment replicas of pods
                          will be distributed under this subset. If nil, the number
                          of replicas in this subset is determined by controller.
                          Controller will try to keep all the subsets with nil replicas
                          have average pods.
                        x-kubernetes-int-or-string: true
                      tolerations:
                        description: Indicates the tolerations the pods under this
                          subset have. A subset's tolerations is not allowed to be
                          updated.
                        items:
                          description: The pod this Toleration is attached to tolerates
                            any taint that matches the triple <key,value,effect> using
                            the matching operator <operator>.
                          type: object
                          x-kubernetes-preserve-unknown-fields: true
                        type: array
                    required:
                    - name
                    type: object
                  type: array
              type: object
            updateStrategy:
              description: UpdateStrategy indicates the strategy the UnitedDeployment
                use to preform the update, when template is changed.
              properties:
                manualUpdate:
                  description: Includes all of the parameters a Manual update strategy
                    needs.
                  properties:
                    partitions:
                      additionalProperties:
                        format: int32
                        type: integer
                      description: Indicates number of subset partition.
                      type: object
                  type: object
                type:
                  description: Type of UnitedDeployment update strategy. Default is
                    Manual.
                  type: string
              type: object
          required:
          - selector
          type: object
        status:
          description: UnitedDeploymentStatus defines the observed state of UnitedDeployment.
          properties:
            collisionCount:
              description: Count of hash collisions for the UnitedDeployment. The
                UnitedDeployment controller uses this field as a collision avoidance
                mechanism when it needs to create the name for the newest ControllerRevision.
              format: int32
              type: integer
            conditions:
              description: Represents the latest available observations of a UnitedDeployment's
                current state.
              items:
                description: UnitedDeploymentCondition describes current state of
                  a UnitedDeployment.
                properties:
                  lastTransitionTime:
                    description: Last time the condition transitioned from one status
                      to another.
                    format: date-time
                    type: string
                  message:
                    description: A human readable message indicating details about
                      the transition.
                    type: string
                  reason:
                    description: The reason for the condition's last transition.
                    type: string
                  status:
                    description: Status of the condition, one of True, False, Unknown.
                    type: string
                  type:
                    description: Type of in place set condition.
                    type: string
                type: object
              type: array
            currentRevision:
              description: CurrentRevision, if not empty, indicates the current version
                of the UnitedDeployment.
              type: string
            observedGeneration:
              description: ObservedGeneration is the most recent generation observed
                for this UnitedDeployment. It corresponds to the UnitedDeployment's
                generation, which is updated on mutation by the API Server.
              format: int64
              type: integer
            readyReplicas:
              description: The number of ready replicas.
              format: int32
              type: integer
            replicas:
              description: Replicas is the most recently observed number of replicas.
              format: int32
              type: integer
            subsetReplicas:
              additionalProperties:
                format: int32
                type: integer
              description: Records the topology detail information of the replicas
                of each subset.
              type: object
            updateStatus:
              description: Records the information of update progress.
              properties:
                currentPartitions:
                  additionalProperties:
                    format: int32
                    type: integer
                  description: Records the current partition.
                  type: object
                updatedRevision:
                  description: Records the latest revision.
                  type: string
              type: object
            updatedReadyReplicas:
              description: The number of ready current revision replicas for this
                UnitedDeployment.
              format: int32
              type: integer
            updatedReplicas:
              description: The number of pods in current version.
              format: int32
              type: integer
          required:
          - currentRevision
          - replicas
          - updatedReplicas
          type: object
      type: object
  version: v1alpha1
  versions:
  - name: v1alpha1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: kruise/templates/rbac_role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: kruise-manager-role
rules:
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - mutatingwebhookconfigurations
  verbs:
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - validatingwebhookconfigurations
  verbs:
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apps
  resources:
  - controllerrevisions
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apps
  resources:
  - statefulsets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apps
  resources:
  - statefulsets/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - apps.kruise.io
  resources:
  - advancedcronjobs
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apps.kruise.io
  resources:
  - advancedcronjobs/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - apps.kruise.io
  resources:
  - broadcastjobs
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apps.kruise.io
  resources:
  - broadcastjobs/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - apps.kruise.io
  resources:
  - clonesets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apps.kruise.io
  resources:
  - clonesets/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - apps.kruise.io
  resources:
  - daemonsets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apps.kruise.io
  resources:
  - daemonsets/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - apps.kruise.io
  resources:
  - sidecarsets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apps.kruise.io
  resources:
  - sidecarsets/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - apps.kruise.io
  resources:
  - statefulsets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apps.kruise.io
  resources:
  - statefulsets/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - apps.kruise.io
  resources:
  - uniteddeployments
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apps.kruise.io
  resources:
  - uniteddeployments/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - batch
  resources:
  - jobs
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - batch
  resources:
  - jobs/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - pods/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
---
# Source: kruise/templates/rbac_role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kruise-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kruise-manager-role
subjects:
  - kind: ServiceAccount
    name: default
    namespace: kruise-system
---
# Source: kruise/templates/rbac_role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kruise-leader-election-role
  namespace: kruise-system
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - ""
    resources:
      - configmaps/status
    verbs:
      - get
      - update
      - patch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
---
# Source: kruise/templates/rbac_role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kruise-leader-election-rolebinding
  namespace: kruise-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kruise-leader-election-role
subjects:
  - kind: ServiceAccount
    name: default
    namespace: kruise-system
---
# Source: kruise/templates/manager.yaml
apiVersion: v1
kind: Service
metadata:
  name: kruise-webhook-service
  namespace: kruise-system
spec:
  ports:
    - port: 443
      targetPort: 9876
  selector:
    control-plane: controller-manager
---
# Source: kruise/templates/manager.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    control-plane: controller-manager
  name: kruise-controller-manager
  namespace: kruise-system
spec:
  replicas: 2
  selector:
    matchLabels:
      control-plane: controller-manager
  template:
    metadata:
      labels:
        control-plane: controller-manager
    spec:
      containers:
        - args:
            - --enable-leader-election
            - --metrics-addr=0.0.0.0:8080
            - --health-probe-addr=:8000
            - --logtostderr=true
            - --v=4
          command:
            - /manager
          image: openkruise/kruise-manager:v0.7.0
          imagePullPolicy: Always
          name: manager
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: WEBHOOK_PORT
              value: "9876"
            - name: CUSTOM_RESOURCE_ENABLE
              value: 
            - name: WEBHOOK_CONFIGURATION_FAILURE_POLICY_PODS
              value: Ignore
          ports:
            - containerPort: 9876
              name: webhook-server
              protocol: TCP
            - containerPort: 8080
              name: metrics
              protocol: TCP
            - containerPort: 8000
              name: health
              protocol: TCP
          readinessProbe:
            httpGet:
              path: readyz
              port: 8000
          resources:
            limits:
              cpu: 100m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 256Mi
      terminationGracePeriodSeconds: 10
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: control-plane
                  operator: In
                  values:
                  - controller-manager
              topologyKey: kubernetes.io/hostname
            weight: 100
---
# Source: kruise/templates/webhookconfiguration.yaml
apiVersion: admissionregistration.k8s.io/v1beta1
kind: MutatingWebhookConfiguration
metadata:
  creationTimestamp: null
  name: kruise-mutating-webhook-configuration
  annotations:
    template: ""
webhooks:
  - clientConfig:
      caBundle: Cg==
      service:
        name: kruise-webhook-service
        namespace: kruise-system
        path: /mutate-apps-kruise-io-v1alpha1-sidecarset
    failurePolicy: Fail
    name: msidecarset.kb.io
    rules:
      - apiGroups:
          - apps.kruise.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - sidecarsets
  - clientConfig:
      caBundle: Cg==
      service:
        name: kruise-webhook-service
        namespace: kruise-system
        path: /mutate-pod
    failurePolicy: Ignore
    name: mpod.kb.io
    namespaceSelector:
      matchExpressions:
        - key: control-plane
          operator: DoesNotExist
    rules:
      - apiGroups:
          - ""
        apiVersions:
          - v1
        operations:
          - CREATE
        resources:
          - pods
  - clientConfig:
      caBundle: Cg==
      service:
        name: kruise-webhook-service
        namespace: kruise-system
        path: /mutate-apps-kruise-io-v1alpha1-advancedcronjob
    failurePolicy: Fail
    name: madvancedcronjob.kb.io
    rules:
      - apiGroups:
          - apps.kruise.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - advancedcronjobs
  - clientConfig:
      caBundle: Cg==
      service:
        name: kruise-webhook-service
        namespace: kruise-system
        path: /mutate-apps-kruise-io-v1alpha1-broadcastjob
    failurePolicy: Fail
    name: mbroadcastjob.kb.io
    rules:
      - apiGroups:
          - apps.kruise.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - broadcastjobs
  - clientConfig:
      caBundle: Cg==
      service:
        name: kruise-webhook-service
        namespace: kruise-system
        path: /mutate-apps-kruise-io-v1alpha1-cloneset
    failurePolicy: Fail
    name: mcloneset.kb.io
    rules:
      - apiGroups:
          - apps.kruise.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - clonesets
  - clientConfig:
      caBundle: Cg==
      service:
        name: kruise-webhook-service
        namespace: kruise-system
        path: /mutate-apps-kruise-io-v1alpha1-daemonset
    failurePolicy: Fail
    name: mdaemonset.kb.io
    rules:
      - apiGroups:
          - apps.kruise.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - daemonsets
  - clientConfig:
      caBundle: Cg==
      service:
        name: kruise-webhook-service
        namespace: kruise-system
        path: /mutate-apps-kruise-io-statefulset
    failurePolicy: Fail
    name: mstatefulset.kb.io
    rules:
      - apiGroups:
          - apps.kruise.io
        apiVersions:
          - v1alpha1
          - v1beta1
        operations:
          - CREATE
          - UPDATE
        resources:
          - statefulsets
  - clientConfig:
      caBundle: Cg==
      service:
        name: kruise-webhook-service
        namespace: kruise-system
        path: /mutate-apps-kruise-io-v1alpha1-uniteddeployment
    failurePolicy: Fail
    name: muniteddeployment.kb.io
    rules:
      - apiGroups:
          - apps.kruise.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - uniteddeployments
---
# Source: kruise/templates/webhookconfiguration.yaml
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingWebhookConfiguration
metadata:
  creationTimestamp: null
  name: kruise-validating-webhook-configuration
  annotations:
    template: ""
webhooks:
  - clientConfig:
      caBundle: Cg==
      service:
        name: kruise-webhook-service
        namespace: kruise-system
        path: /validate-apps-kruise-io-v1alpha1-advancedcronjob
    failurePolicy: Fail
    name: vadvancedcronjob.kb.io
    rules:
      - apiGroups:
          - apps.kruise.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - advancedcronjobs
  - clientConfig:
      caBundle: Cg==
      service:
        name: kruise-webhook-service
        namespace: kruise-system
        path: /validate-apps-kruise-io-v1alpha1-broadcastjob
    failurePolicy: Fail
    name: vbroadcastjob.kb.io
    rules:
      - apiGroups:
          - apps.kruise.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - broadcastjobs
  - clientConfig:
      caBundle: Cg==
      service:
        name: kruise-webhook-service
        namespace: kruise-system
        path: /validate-apps-kruise-io-v1alpha1-cloneset
    failurePolicy: Fail
    name: vcloneset.kb.io
    rules:
      - apiGroups:
          - apps.kruise.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - clonesets
  - clientConfig:
      caBundle: Cg==
      service:
        name: kruise-webhook-service
        namespace: kruise-system
        path: /validate-apps-kruise-io-v1alpha1-daemonset
    failurePolicy: Fail
    name: vdaemonset.kb.io
    rules:
      - apiGroups:
          - apps.kruise.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - daemonsets
  - clientConfig:
      caBundle: Cg==
      service:
        name: kruise-webhook-service
        namespace: kruise-system
        path: /validate-apps-kruise-io-v1alpha1-sidecarset
    failurePolicy: Fail
    name: vsidecarset.kb.io
    rules:
      - apiGroups:
          - apps.kruise.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - sidecarsets
  - clientConfig:
      caBundle: Cg==
      service:
        name: kruise-webhook-service
        namespace: kruise-system
        path: /validate-apps-kruise-io-statefulset
    failurePolicy: Fail
    name: vstatefulset.kb.io
    rules:
      - apiGroups:
          - apps.kruise.io
        apiVersions:
          - v1alpha1
          - v1beta1
        operations:
          - CREATE
          - UPDATE
        resources:
          - statefulsets
  - clientConfig:
      caBundle: Cg==
      service:
        name: kruise-webhook-service
        namespace: kruise-system
        path: /validate-apps-kruise-io-v1alpha1-uniteddeployment
    failurePolicy: Fail
    name: vuniteddeployment.kb.io
    rules:
      - apiGroups:
          - apps.kruise.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - uniteddeployments
